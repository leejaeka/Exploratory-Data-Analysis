model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
# The goal of files, like this one, is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
# You should see something like "chr[1:7]" in the 'Environment'
# or 'Workspace' tab. This is because you created a vector with
# 7 names that have a type of character (strings). The arrow-like
# '<-' symbol is the assignment operator in R, similar to the
# equal sign '=' in other programming languages. The c() is a
# generic function that combines arguments, in this case the
# names of people, to form a vector.
# A vector is one of the data types in R. Vectors must contain
# the same type of data, that is the entries must all be of the
# same type: character, logical (TRUE or FALSE), or numeric.
# HELPFUL TIP: You can add values to a vector.
# Run each line of code one at a time below to see what is happening.
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
# 2. Replace YOUR_NAME with your actual name in the vector
# 'udacious' and run the code. Be sure to use quotes around it.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
# Notice how R updates 'udacious' in the workspace.
# It should now say something like 'chr[1:8]'.
# 3. Run the following two lines of code. You can highlight both lines
# of code and run them.
mystery = nchar(udacious)
mystery
# You just created a new vector called mystery. What do you
# think is in this vector? (scroll down for the answer)
# Mystery is a vector that contains the number of characters
# for each of the names in udacious, including your name.
# 4. Run this next line of code.
mystery == 11
# Here we get a logical (or boolean) vector that tells us
# at what locations or indices in the vector where the number
# of characters for the name is equal to 11.
# 5. Let's use this boolean vector, mystery, to subset our
# udacious vector. What do you think the result will be when
# running the line of code below?
# Think about the output before you run this next line of code.
udacious[mystery == 11]
# Scroll down for the answer
# It's your Udacious Instructors for the course!
# (and you may be in the output if you're lucky enough
# to have 11 characters in YOUR_NAME) Either way, we
# think you're pretty udacious for taking this course.
# 6. Alright, all mystery aside...let's dive into some data! Run
# this next command to load the mtcars data.
data(mtcars)
# You should see mtcars appear in the 'Environment' tab.
# R has stored the mtcars data into a spreadsheet-like object
# called a data frame. Run the next command to see what variables
# are in the data set.
names(mtcars)
# names(mtcars) should output all the variable
# names in the data set. You might notice that the car names
# are not a variable in the data set. The car names have been saved
# as row names. More on this later.
# You should also see how many observations (obs.) are in the
# the data frame and the number of variables on each observation.
# 7. To get more information on the data set and the variables
# run the this next line of code.
?mtcars
# You can type a '?' before any command or a data set to learn
# more about it. The details and documentation will appear in
# the 'Help' tab.
# 8. To print out the data, run this next line as code.
mtcars
# Scroll up and down in the console to check out the data.
# This is the entire data frame printed out.
# 9. Run these next two functions, one at a time,
# and see if you can figure out what they do.
str(mtcars)
dim(mtcars)
# Scroll down for the answer.
# The first command, str(mtcars), gives us the structure of the
# data frame. It lists the variable names, the type of each variable
# (all of these variables are numerics) and some values for each
# variable.
# The second command, dim(mtcars), should output '[1] 32 11'
# to the console. Don't worry about the [1].
# I'll explain that later.
# 10. Read the documentation for row.names if you're want to know more.
?row.names
# Run this code to change the row names of the cars to numbers.
row.names(mtcars) <- c(1:32)
# Now print out the data frame by running the code below.
mtcars
# It's tedious to relabel our data frame with the right car names
# so let's reload the data set and print out the first ten rows.
data(mtcars)
head(mtcars, 10)
# The head() fucntion prints out the first six rows of a data frame
# by default. Run the code below to see.
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
# 11. We've run nine commands so far:
#      c, nchar, data, str, dim, names, row.names, head, and tail.
# All of these commands took some inputs or arguments.
# To determine if a command takes more arguments or to learn
# about any default settings, you can look up the documentation
# using '?' before the command, much like you did to learn about
# the mtcars data set and the row.names
# 12. Let's examine our car data more closely. We can access an
# an individual variable (or column) from the data frame using
# the '$' sign. Run the code below to print out the variable
# miles per gallon. This is the mpg column in the data frame.
mtcars$mpg
# Print out any two other variables to the console.
# This is a vector containing the mpg (miles per gallon) of
# the 32 cars. Run this next line of code to get the average mpg for
# for all the cars. What is it?
# Enter this number for the quiz on the Udacity website.
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
getwd
getwd
getwd()
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
setwd('~/Desktop/rscrips/Downloads')
statesInfo <- read.csv('stateData.csv')
getwd()
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
getwd()
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
statesInfo <- read.csv('Downloads/stateData.csv')
statesInfo <- read.csv('stateData.csv')
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
getwd()
setwd('~/Downloads')
statesInfo <- read.csv('stateData.csv')
subset(statesInfo, state.region == 1)
setwd("C:\Users\tonyl\Desktop\R Scripts")
setwd("C:\\Users\tonyl\Desktop\R Scripts")
setwd("~/Downloads")
getwd()
setwd("C:/Users/tonyl/Documents/R_Scripts")
setwd(dir)
setwd()
getwd()
setwd('~/Downloads')
setwd('~/R_Scripts')
setwd('D:\Project\R Scripts\Udacity+Facebook')
setwd('D:/Project/R Scripts/Udacity+Facebook')
statesInfo <- read.csv('stateData.csv')
subset(statesInfo, state.region == 1)
statesInfo[statesInfo$state.region == 1, ]
setwd('D:/Project/R Scripts/Udacity+Facebook')
statesInfo <- read.csv('stateData.csv')
stateSubset <- subset(statesInfo, state.region == 1)
head(stateSubset, 2)
dim(stateSubset)
stateSubsetBracket <- statesInfo[statesInfo$state.region == 1, ]
head(stateSubsetBracket,2 )
dim(stateSubsetBracket)
Demystifying R Part 2
========================================================
You might see a warning message just above this file. Something like...
"R Markdown requires the knitr package (version 1.2 or higher)"
Don't worry about this for now. We'll address it at the end of this file.
1. Run the following command to see what it does.
```{r}
summary(mtcars)
```
If you know about quantiles, then the output should look familiar.
If not, you probably recognize the min (minimum), median, mean, and max (maximum).
We'll go over quantiles in Lesson 3 so don't worry if the output seems overwhelming.
The str() and summary() functions are helpful commands when working with a new data set.
The str() function gives us the variable names and their types.
The summary() function gives us an idea of the values a variable can take on.
2. In 2013, the average mpg (miles per gallon) for a car was 23 mpg.
The car models in the mtcars data set come from the year 1973-1974.
Subset the data so that you create a new data frame that contains
cars that get 23 or more mpg (miles per gallon). Save it to a new data
frame called efficient.
```{r}
```
3. How many cars get more than 23 mpg? Use one of the commands you
learned in the demystifying.R to answer this question.
```{r}
```
4. We can also use logical operators to find out which car(s) get greater
than 30 miles per gallon (mpg) and have more than 100 raw horsepower.
```{r}
subset(mtcars, mpg > 30 & hp > 100)
```
There's only one car that gets more than 30 mpg and 100 hp.
5. What do you think this code does? Scroll down for the answer.
```{r}
subset(mtcars, mpg < 14 | disp > 390)
```
Note: You may be familiar with the || operator in Java. R uses one single & for the logical
operator AND. It also uses one | for the logical operator OR.
The command above creates a data frame of cars that have mpg less than 14
OR a displacement of more than 390. Only one of the conditions for a car
needs to be satisfied so that the car makes it into the subset. Any of the
cars that fit the criteria are printed to the console.
Now you try some.
6. Print the cars that have a 1/4 mile time (qsec) less than or equal to
16.90 seconds to the console.
```{r}
```
7. Save the subset of cars that weigh under 2000 pounds (weight is measured in lb/1000)
to a variable called lightCars. Print the numbers of cars and the subset to the console.
```{r}
```
8. You can also create new variables in a data frame. Let's say you wanted
to have the year of each car's model. We can create the variable
mtcars$year. Here we'll assume that all of the models were from 1974.
Run the code below.
```{r}
mtcars$year <- 1974
```
Notice how the number of variables changed in the work space. You can
also see the result by double clicking on mtcars in the workspace and
examining the data in a table.
To drop a variable, subset the data frame and select the variable you
want to drop with a negative sign in front of it.
```{r}
mtcars <- subset(mtcars, select = -year)
```
Notice, we are back to 11 variables in the data frame.
9. What do you think this code does? Run it to find out.
```{r}
mtcars$year <- c(1973, 1974)
```
Open the table of values to see what values year takes on.
Drop the year variable from the data set.
```{r}
```
10. Now you are going to get a preview of ifelse(). For those new
to programming this example may be confusing. See if you can understand
the code by running the commands one line at a time. Read the output and
make sense of what the code is doing at each step.
If you are having trouble don't worry, we will review the ifelse statement
at the end of Lesson 3. You won't be quizzed on it, and it's not essential
to keep going in this course. We just want you to try to get familiar with
more code.
```{r}
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
```
You have some variables in your workspace or environment like 'cond' and
efficient. You want to be careful that you don't bring in too much data
into R at once since R will hold all the data in working memory. We have
nothing to worry about here, but let's delete those variables from the
work space.
```{r}
rm(cond)
rm(efficient)
```
Save this file if you haven't done so yet.
You'll have the opportunity to create one Rmd file for the final project in
this class and submit the Rmd file and knitted output (or HTML file). You'll
need the knitr package to do that so let's install that now. **Uncomment** the
following two lines of code and run them.
```{r}
# install.packages('knitr', dependencies = T)
# library(knitr)
```
Once you've installed knitr, **comment** out the two lines of code above.
When you click the **Knit HTML** button a web page will be generated that
includes both content (text and text formatting from Markdown) as well as
the output of any embedded R code chunks within the document.
You've reached the end of the file so now it's time to write some code to
answer a question to continue on in Lesson 2.
Which car(s) have an mpg (miles per gallon) greater than or equal to 30
OR hp (horsepower) less than 60? Create an R chunk of code to answer the question.
Once you have the answer, go the [Udacity website](https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129319/m-811719066) to continue with Lesson 2.
Note: You use brackets around text followed by two parentheses to create a link.
There must be no spaces between the brackets and the parentheses. Paste or type
the link into the parentheses. This also works on the discussions!
And if you want to see all of your HARD WORK from this file, click
the **KNIT HTML** button now. (You may or may not need to restart R).
# CONGRATULATIONS
#### You'll be exploring data soon with your new knowledge of R.
subset(mtcars, mpg >= 30 & hp < 60)
subset(mtcars, mpg >= 30 || hp < 60)
subset(mtcars, mpg >= 30 | hp < 60)

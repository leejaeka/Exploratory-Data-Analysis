lines(x_i, df(x_i,df1=1, df2=2),col='red')
set.seed(1002224444)
n=10
n.sim=100
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
set.seed(1002224444)
n=10
n.sim=100
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
e
View(model)
#Q2
hist(y)
#Q2
hist(model)
#Q2
hist(model.intercept)
View(model)
#Q2
hist(model.coefficients[0])
#Q2
hist(model[coefficients][0])
#Q2
hist(model[coefficients])
#Q2
hist(model[0])
#Q2
hist(model[0][0])
#Q2
hist(0.009)
# Q1
set.seed(1003661272)
n=10
n.sim=100
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
#Q2
hist()
sl<-c(1)
sl[1]
sl[0]
set.seed(1003661272)
n=10
n.sim=100
co<-c()
sl<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
print(coef(model))
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
co<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
co<-coef(model)
}
co
# Q1
set.seed(1003661272)
n=10
n.sim=100
co<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
co[i]<-coef(model)
}
warnings()
co
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[0]
b1[i]<-coef(model)[1]
}
b0[i]<-coef(model)[0]
b1[i]<-coef(model)[1]
}
b0
b1
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
b0
b1
#Q2
hist(b0)
hist(b1)
#Q2
hist(b0,b1)
# Q1
set.seed(1003661272)
n=10
n.sim=100
modelSim<-c()
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
modelSim[i]<-model
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
modelSim
mean(b0)
mean(b1)
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se[i]<-model[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2]
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
model[["coefficients"]][["(Intercept)"]]
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
pf$age_with_months <- pf$age + (12-pf$dob_month)/12
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
pf$fc_by_age_months <- pf$age_with_months + (mean(pf$friend_count)) +
(median(pf$friend_count))
pf.fc_by_age_months <- arrange(pf.fc_by_age_months, age_with_months)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
age_with_months_groups <- group_by(pf, age_with_months)
pf.fc_by_age_months <- summarise(age_with_months_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n=n())
pf.fc_by_age_months <- arrange(pf.fc_by_age_months, age_with_months)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
age_with_months_groups <- group_by(pf, age_with_months)
library(dplyr)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
age_with_months_groups <- group_by(pf, age_with_months)
pf.fc_by_age_months <- summarise(age_with_months_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n=n())
pf.fc_by_age_months <- arrange(pf.fc_by_age_months, age_with_months)
#line plot
ggplot(aes(x = subset(age_with_months_groups<71), y = friend_count_mean), data = pf.fc_by_age_months)+geom_line()
#line plot
ggplot(aes(x = age_with_months_groups, y = friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months<71)+geom_line()
#line plot
ggplot(aes(x = age_with_months_groups, y = friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months<71))+geom_line()
library(ggplot2)
#line plot
ggplot(aes(x = age_with_months_groups, y = friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months<71))+geom_line()
#line plot
ggplot(aes(x = age_with_months, y = friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months<71))+geom_line()

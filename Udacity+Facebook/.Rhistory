e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se[i]<-model[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2]
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
model[["coefficients"]][["(Intercept)"]]
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
#Creat better vis
ggplot(aes(x=time,y=price),data=yo)+
geom_jitter(alpha=1/4, shape=21)
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
library(ggplot2)
library(dplyr)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
#YOGURT DATASET
yo <- read.csv('yogurt.csv')
qplot(data=yo, x=price, binwidth=2)
#Creat better vis
ggplot(aes(x=time,y=price),data=yo)+
geom_jitter(alpha=1/4, shape=21)
geom_point(aes(size=all.purchases), pch = 1)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
# Create seperate linegraph for households
set.seed(42)
sample.ids <- sample(levels(yo$id), 8)
# Create a new variable called all.purchases,
# which gives the total counts of yogurt for
# each observation or household.
yo <- transform(yo, all.purchases = strawberry+blueberry+pina.colada+plain+mixed.berry)
sample.ids <- sample(levels(yo$id), 8)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
library(tidyverse)
sample.ids <- sample(levels(yo$id), 16)
sample.ids <- sample(levels(yo$id), 16)
sample.ids <- sample(level(yo$id), 16)
sample.ids <- sample(levels(yo.id), 16)
sample.ids <- sample(levels(yo$ids), 16)
sample.ids <- sample(levels(yo$ids), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(levels(yo$ids), 16)
sample.ids <- sample(levels(yo$ids), 16)
sample.ids <- sample((yo$id), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
ggplot(aes(x=time, y=price), data=subset(yo.id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(c(yo$id), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
sample.ids <- sample(yo$id, 16)
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1))
ggplot(aes(x=time, y=price), data=subset(yo,id %in% sample.ids)) +
facet_wrap(~id)+
geom_line()+
geom_point(aes(size=all.purchases), pch = 1)
data('diamonds')
ggplot(aes(x=color, y=prices), data=diamonds) +
facet_wrap(~color)+
geom_bar(aes(color=color))
ggplot(aes(x=color, y=price), data=diamonds) +
facet_wrap(~color)+
geom_bar(aes(color=color))
ggplot(aes(x=color, y=price), data=diamonds) +
facet_wrap(~color)+
geom_bar()
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
diamonds$cut.bucket <-cut(diamonds$cut)
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
diamonds$cut.bucket <-strsplit(diamonds$cut)
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
unique(diamonds$cut)
diamonds$cut.bucket <-strsplit(diamonds$cut,c('Fair','Good','Very Good','Premium','Ideal'))
diamonds$cut.bucket <-cut(diamonds$cut,c('Fair','Good','Very Good','Premium','Ideal'))
strsplit
diamonds$cut.bucket <-strsplit(diamonds$cut,c('Fair','Good','Very Good','Premium','Ideal'))
diamonds$cut.bucket <-cut(diamonds$cut,c('Fair','Good','Very Good','Premium','Ideal'))
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
head(pf.fc_by_age_gender.wide)
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
head(pf.fc_by_age_gender.wide)
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(diamonds, aes(x=price, fill=cut)) +
geom_histogram(bins=50) +
scale_fill_brewer(type = 'qual') +
facet_wrap(~color)
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(diamonds, aes(x=log(price), fill=cut)) +
geom_histogram(bins=10) +
scale_fill_brewer(type = 'qual') +
facet_wrap(~color)
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=log(price), y=table, fill=cut)) +
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=log(price), y=table, color=cut)) +
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=log(price), y=table, color=cut)) +
geom_point(alpha=1/20)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=log(price), y=table, color=cut)) +
geom_point(alpha=1/20)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=log(price), y=table, color=cut)) +
geom_point(position=position_jitter(), alpha=1/20)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=(price), y=table, color=cut)) +
geom_point(position=position_jitter(), alpha=1/20)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=(price), y=table, color=cut)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=table, y=price, color=cut)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
ggplot(subset(diamonds, quantile(x*y*z,.99)), aes(x=x*y*z, y=price, color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')+
scale_y_continuous(log10(y))
ggplot(diamonds, aes(x=x*y*z, y=price, color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')+
scale_y_continuous(log10(y))
ggplot(diamonds, aes(x=x*y*z, y=price, color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')+
scale_y_continuous(log10())
ggplot(diamonds, aes(x=x*y*z, y=log10(price), color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
ggplot(subset(diamonds, x*y*z < quantile(x*y*z, 0.99)),
aes(x=x*y*z, y=log10(price), color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# Your task is to create a new variable called 'prop_initiated'
# in the Pseudo-Facebook data set. The variable should contain
# the proportion of friendships that the user initiated.
pf$prop_initiated <- friendships_initiated/friend_count
# Your task is to create a new variable called 'prop_initiated'
# in the Pseudo-Facebook data set. The variable should contain
# the proportion of friendships that the user initiated.
pf$prop_initiated <- pf$friendships_initiated/pf$friend_count
# Create a line graph of the median proportion of
# friendships initiated ('prop_initiated') vs.
# tenure and color the line segment by
# year_joined.bucket.
pf$year_joined <- floor(2014-pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012,2014))
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)

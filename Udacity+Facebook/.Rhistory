#BOX PLOTS
# ALCOHOL
ggplot(data=wine,
aes(y=alcohol)) +
geom_boxplot() +
facet_wrap((~quality.bucket))
# DENSITY
ggplot(data=wine,
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket))
#CHLORIDES
ggplot(data=wine,
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket))
#BOX PLOTS
# ALCOHOL
ggplot(data=wine,
aes(y=alcohol)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
# DENSITY
ggplot(data=wine,
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket))
# DENSITY
ggplot(data=wine,
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
# DENSITY
ggplot(data=subset(wine,density<quantile(density,0.99)),
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=wine,
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket))
#CHLORIDES
ggplot(data=wine,
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.99)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.97)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.05)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.97) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#BOX PLOTS
# ALCOHOL
ggplot(data=wine,
aes(y=alcohol)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
# DENSITY
ggplot(data=subset(wine,density<quantile(density,0.99)),
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
wineByQuality <- summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chloride),
n=n())
wine_qual <- group_by(wine, quality)
wineByQuality <- summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chloride),
n=n())
wineByQuality <- summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n())
wineByQuality <- summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n())
wineByQuality <- wine_qual %>%
summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n()) %>%
ungroup() %>%
arrange()
wineByQuality <- wine_qual %>%
group_by(quality) %>%
summarise(wine_qual, med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n()) %>%
ungroup() %>%
arrange()
wineByQuality <- wine_qual %>%
group_by(quality) %>%
summarise(med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n()) %>%
ungroup() %>%
arrange()
wineByQuality <- wine %>%
group_by(quality) %>%
summarise(med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n()) %>%
ungroup() %>%
arrange()
wine.wineByQuality <- wine %>%
group_by(quality) %>%
summarise(med_alcohol=median(alcohol),
med_desity=median(density),
med_chloride=median(chlorides),
n=n()) %>%
ungroup() %>%
arrange()
wine.wineByQuality <- wine %>%
group_by(quality) %>%
summarise(med_alcohol=median(as.numeric(alcohol)),
med_desity=median(as.numeric(density)),
med_chloride=median(as.numeric(chlorides)),
n=n()) %>%
ungroup() %>%
arrange()
wine.wineByQuality <- wine %>%
group_by(quality) %>%
summarise(med_alcohol=median(as.numeric(alcohol)),
med_desity=median(as.numeric(density)),
med_chloride=median(as.numeric(chlorides)),
n=n()) %>%
ungroup() %>%
arrange(quality)
wine.wineByQuality
lm(quality ~ density + alcohol + chlorides, data = wine)
model <- lm(quality ~ density + alcohol + chlorides, data = wine)
summary(model)
#Let's bucket the qualities
# High [8,9] Med [5,6,7] Low [3,4]
wine$quality.bucket <- cut(wine$quality, breaks=c(2,4,7,9))
levels(wine$quality.bucket)
levels(wine$quality.bucket) <- c("Low Quality", "Medium Quality", "High Quality")
ggplot(data=subset(wine,density < quantile(density,0.99)),
aes(x=(alcohol), y=density, color=residual.sugar)) +
scale_y_log10(limits=c(0.987, 1.001)) +
facet_wrap(~quality.bucket) +
geom_point(alpha = 0.8, shape=3,size = 1) +
scale_color_gradient(low="blue", high="pink")
install.packages(randomForest)
install.packages('randomForest')
library(randomForest)
rf_classifier= randomForest(quality~., data=train, n=100, mtry=2, importance=TRUE)
#install.packages('randomForest')
library(randomForest)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(wine))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size = smp_size)
train <- wine[train_ind, ]
test <- wine[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, n=100, mtry=2, importance=TRUE)
rf_classifier= randomForest(quality~., data=train, ntree=100, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(quality~., data=train, ntree=50, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
#install.packages('randomForest')
library(randomForest)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(wine_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset)), size = smp_size)
train <- wine_subset[train_ind, ]
test <- wine_subset[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
rf_classifier= randomForest(wine_subset$quality, data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
wine_subset
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[c(1,2,3,6)]
wine_y <- wine_subset[7]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset)), size = smp_size)
train <- wine_subset[train_ind, ]
test <- wine_subset[-train_ind, ]
rf_classifier= randomForest(wine_y, data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
rf_classifier= randomForest(wine_y, data=train, ntree=100, mtry=2, importance=TRUE)
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[c(1,2,3,6)]
wine_y <- wine_subset[7]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset)), size = smp_size)
train <- wine_subset[train_ind, ]
train_y <- wine_y[train_ind,]
test <- wine_subset[-train_ind, ]
test_y <- wine_y[-train_ind,]
rf_classifier= randomForest(wine_y, data=train, ntree=100, mtry=2, importance=TRUE)
rf_classifier
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[c(1,2,3,6)]
wine_y <- wine_subset[7]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
test <- wine_subset_subset[-train_ind, ]
test_y <- wine_y[-train_ind,]
rf_classifier= randomForest(wine_y, data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
train
train_y
summary(train_y)
count(train_y)
nrow(train_y)
nrow(train)
nrow(train_y)
ncol(train_y)
wine_y
wine_subset_subset
train_y
type(train)
typeof(train)
typeof(train_y)
list(train_y)
typeof(train_y)
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[c(1,2,3,6)]
wine_y <- wine_subset[,c(7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
wine_y
typeof(wine_y)
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[,c(1,2,3,6)]
wine_y <- wine_subset[,c(7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
#install.packages('randomForest')
library(randomForest)
wine_subset_subset <- wine_subset[,c(1,2,3,6)]
wine_y <- wine_subset[,c(1,7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
test <- wine_subset_subset[-train_ind, ]
test_y <- wine_y[-train_ind,]
train
rf_classifier= randomForest(wine_y, data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(wine_y$quality, data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier= randomForest(wine_y$quality, data=train, ntree=200, mtry=2, importance=TRUE)
train
train_y
train
train_y
rf_classifier= randomForest(wine_y$quality, data=train, ntree=200, mtry=2, importance=TRUE)
wine_y$quality
rf_classifier= randomForest(wine_y$quality~., data=train, ntree=200, mtry=2, importance=TRUE)
complete.cases(wine_subset_subset)
final[complete.cases(wine_subset_subset),]
na.omit(wine_subset)
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine_subset[,c(1,2,3,6)]
wine_y <- wine_subset[,c(1,7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
test <- wine_subset_subset[-train_ind, ]
test_y <- wine_y[-train_ind,]
rf_classifier= randomForest(wine_y$quality~., data=train, ntree=200, mtry=2, importance=TRUE)
nrow(wine_y$quality)
nrow(wine_y$quality)
nrow(wine_y)
nrow(train_y)
nrow(train)
rf_classifier= randomForest(wine_y$quality~., data=train, ntree=200, mtry=2, importance=TRUE)
nrow(wine_y)
rf_classifier= randomForest(train_y$quality~., data=train, ntree=200, mtry=2, importance=TRUE)
na.omit(wine_subset)
wine_subset_subset <- wine_subset[,c(1,2,3,6)]
wine_y <- wine_subset[,c(1,7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
train_ind <- sample(seq_len(nrow(wine_subset_subset)), size = smp_size)
train <- wine_subset_subset[train_ind, ]
train_y <- wine_y[train_ind,]
test <- wine_subset_subset[-train_ind, ]
test_y <- wine_y[-train_ind,]
rf_classifier= randomForest(train_y$quality~., data=train, ntree=200, mtry=2, importance=TRUE)
train_ind <- sample(seq_len(nrow(wine)), size = nrow(wine))
train <- wine[train_ind, ]
test <- wine[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine_subset[,c(1,2,3,6,7)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size=nrow(wine_subset_subset))
train <- wine_subset_subset[train_ind, ]
test <- wine_subset_subset[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
cols(wine_subest)
cols(wine_subet)
cols(wine_subset)
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size=nrow(wine_subset_subset))
train <- wine_subset_subset[train_ind, ]
test <- wine_subset_subset[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(6,9,12,13)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size=nrow(wine_subset_subset))
train <- wine_subset_subset[train_ind, ]
test <- wine_subset_subset[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
train
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size=nrow(wine_subset_subset))
train <- wine_subset_subset[train_ind, ]
test <- wine_subset_subset[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
#install.packages('randomForest')
library(randomForest)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
temp <- data.frame(x=rnorm(10,30,.2), y=runif(10,3,5))
wine_subset_subset <- scale(temp)
## 75% of the sample size
smp_size <- floor(0.8 * nrow(wine_subset_subset))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(wine)), size=nrow(wine_subset_subset))
train <- wine_subset_subset[train_ind, ]
View(wine_subset)
View(wine_subset_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
library(caret)
install.packages('caret')
install.packages('caret')
library(caret)
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
summary(norm2)
#install.packages('randomForest')
library(randomForest)
install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
install.packages("caret")
norm2$quality <- wine_subset_subset$quality
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
#install.packages('randomForest')
library(randomForest)
rf_classifier= randomForest(quality~., data=train, ntree=200, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)

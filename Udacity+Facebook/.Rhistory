b0
b1
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
b0
b1
#Q2
hist(b0)
hist(b1)
#Q2
hist(b0,b1)
# Q1
set.seed(1003661272)
n=10
n.sim=100
modelSim<-c()
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
modelSim[i]<-model
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
modelSim
mean(b0)
mean(b1)
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se[i]<-model[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2]
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
model[["coefficients"]][["(Intercept)"]]
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
library(ggplot2)
library(dplyr)
library(tidyverse)
data('diamonds')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# 1. Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
ggplot(diamonds, aes(x=log(price), fill=cut)) +
geom_histogram(bins=10) +
scale_fill_brewer(type = 'qual') +
facet_wrap(~color)
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
ggplot(diamonds, aes(x=table, y=price, color=cut)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
ggplot(subset(diamonds, x*y*z < quantile(x*y*z, 0.99)),
aes(x=x*y*z, y=log10(price), color=clarity)) +
geom_point(position=position_jitter(), alpha=1/4)+
scale_color_brewer(type = 'qual')
# Your task is to create a new variable called 'prop_initiated'
# in the Pseudo-Facebook data set. The variable should contain
# the proportion of friendships that the user initiated.
pf$prop_initiated <- pf$friendships_initiated/pf$friend_count
# Create a line graph of the median proportion of
# friendships initiated ('prop_initiated') vs.
# tenure and color the line segment by
# year_joined.bucket.
pf$year_joined <- floor(2014-pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012,2014))
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
# Smooth the last plot you created of
# of prop_initiated vs tenure colored by
# year_joined.bucket. You can bin together ranges
# of tenure or add a smoother to the plot.
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth()
mean(pf$year_joined.bucket)
mean(pf$year_joined)
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth(bin=25)
ggplot(aes(x = tenure, y = prop_initiated),bin=50,
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth()
ggplot(aes(x = tenure, y = prop_initiated),bin=100,
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth()
ggplot(aes(x = tenure, y = prop_initiated),bin=1000,
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth()
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket),bin=100, stat = 'summary', fun.y = median)+
geom_smooth()
ggplot(aes(x = 25*round(tenure/25), y = prop_initiated),
data = subset(pf, !is.na(prop_initiated), !is.na(tenure))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)+
geom_smooth()
mean(pf$prop_initiated)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2012,2014]'],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket,na.rm=TRUE)
=='(2012,2014]']
mean(pf$prop_initiated[pf$year_joined.bucket=='(2012,2014]'],na.rm=TRUE)
# Smooth the last plot you created of
# of prop_initiated vs tenure colored by
# year_joined.bucket. You can bin together ranges
# of tenure or add a smoother to the plot.
mean(pf$prop_initiated[pf$year_joined.bucket],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2011,2012]'],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2012,2014]'],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2003,2009]'],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2009,2011]'],na.rm=TRUE)
mean(pf$prop_initiated[pf$year_joined.bucket=='(2011,2012]'],na.rm=TRUE)
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
ggplot(data=diamonds, x=cut, y=price/carat,color=color) +
facet_wrap(~clarity)
# Create a scatter plot of the price/carat ratio
# of diamonds. The variable x should be
# assigned to cut. The points should be colored
# by diamond color, and the plot should be
# faceted by clarity.
cost <- diamonds$price/diamonds$carat
ggplot(data=diamonds, x=cut, y=cost,color=color) +
facet_wrap(~clarity)
ggplot(data=diamonds, aes(x=cut, y=cost,color=color)) +
facet_wrap(~clarity)
ggplot(data=diamonds, aes(x=cut, y=cost,color=color)) +
facet_wrap(~clarity) +
geom_point()
ggplot(data=diamonds, aes(x=cut, y=cost,color=color)) +
facet_wrap(~clarity) +
geom_point(position=position_jitter(), alpha=1/4)
ggplot(data=diamonds, aes(x=cut, y=cost,color=color)) +
facet_wrap(~clarity) +
geom_point(position=position_jitter(), alpha=0.80)
library(ggplot2)
data('diamonds')
ggplot(data=diamonds)
ggplot(data=diamonds, x=carat, y=price)
ggplot(data=diamonds, aes(x=carat, y=price))
ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point()
plot1 <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point() +
ggtitle('Price')
plot2 <- ggplot(data=diamonds, aes(x=carat, y=log10(price))) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
library(gridExtra)
install.packages(gridExtra)
install.packages('gridExtra')
install.packages("gridExtra")
library(gridExtra)
plot1 <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point() +
ggtitle('Price')
plot2 <- ggplot(data=diamonds, aes(x=carat, y=log10(price))) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
plot1 <- qplot(data=diamonds, aesx=carat, y=price) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=carat, y=log10(price)) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
library(ggplot2)
plot1 <- qplot(data=diamonds, aesx=carat, y=price) + geom_point() +
ggtitle('Price')
plot1 <- qplot(data=diamonds, x=carat, y=price) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=carat, y=log10(price)) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
plot1 <- qplot(data=diamonds, x=price) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=log10(price)) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
plot1 <- qplot(data=diamonds, x=price, binwidth = 100) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=log10(price), binwidth = 0.01) + geom_point() +
ggtitle('Price (log10)')
grid.arrange()
grid.arrange(plot1, plot2, ncol =2)
plot2 <- qplot(data=diamonds, x=log10(price), binwidth = 0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol =2)
plot1 <- qplot(data=diamonds, x=price, binwidth = 100) +
ggtitle('Price')
plot2 <- qplot(data=diamonds, x=log10(price), binwidth = 0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol =2)

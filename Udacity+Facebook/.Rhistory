b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
modelSim[i]<-model
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
modelSim
mean(b0)
mean(b1)
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se[i]<-model[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[,2]
}
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2]
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
model[["coefficients"]][["(Intercept)"]]
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
dia <- data('diamonds')
library(ggplot)
library(ggplot2)
dia <- data('diamonds')
dia <- data('diamonds')
qplot(x = x, y = price, data = dia)
qplot(x = x, y = price, data = diamonds)
corr(price, x)
correlation(price, x)
library(dplyr)
cor.test(pf$x, pf$price, method='pearson'))
cor.test(pf$x, pf$price, method='pearson')
cor.test(diamonds$x, diamonds$price, method='pearson')
cor.test(diamonds$price, diamonds$z, method='pearson')
cor.test(diamonds$y, diamonds$price, method='pearson')
#transparency and breaks
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/20) + scale_x_continuous(breaks=1:2)
max(diamonds$x)
#transparency and breaks
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/20) + scale_x_continuous(breaks=seq(0,10.74,2))
max(diamonds$depth)
#transparency and breaks
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/20) + scale_x_continuous(breaks=seq(0,79,2))
summary(diamonds$depth)
cor.test(diamonds$depth, diamonds$price, method='pearson')
## Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(data=diamonds, aes(x=price, y=carat)) +xlim(0,quantile(diamonds$price, 0.99))+
ylim(0,quantile(diamonds$carat, 0.99))
## Create a scatterplot of price vs carat
# and omit the top 1% of price and carat values.
ggplot(data=diamonds, aes(y=price, x=carat)) +ylim(0,quantile(diamonds$price, 0.99))+
xlim(0,quantile(diamonds$carat, 0.99))
# Create a scatterplot of price vs. volume (x * y * z).
# This is a very rough approximation for a diamond's volume.
ggplot(data=diamonds, x=x*y*z, y =price)
diamonds.volume <- diamonds$x * diamonds$y * diamonds$z
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
# Create a scatterplot of price vs. volume (x * y * z).
# This is a very rough approximation for a diamond's volume.
ggplot(data=diamonds, x=volume, y =price)
# Create a scatterplot of price vs. volume (x * y * z).
# This is a very rough approximation for a diamond's volume.
ggplot(data=diamonds, x=volume, y =price)
ggplot(data=diamonds, aes(x=volume, y =price))
qplot(x=price, y=volume, data=diamonds)
## Create a scatterplot of price vs carat
# and omit the top 1% of price and carat values.
ggplot(data=diamonds, aes(y=price, x=carat)) +ylim(0,quantile(diamonds$price, 0.99))+
xlim(0,quantile(diamonds$carat, 0.99))
## Create a scatterplot of price vs carat
# and omit the top 1% of price and carat values.
qplot(data=diamonds, y=price, x=carat) +ylim(0,quantile(diamonds$price, 0.99))+
xlim(0,quantile(diamonds$carat, 0.99))
cor.test(diamonds$price, diamonds$volume >0 && diamonds$volume <800 )
#Correlation of price and volume, 0 < volume < 800
dia_sub <- subset(diamonds, diamonds$volume<800 & diamonds$volume>0)
cor.test(dia_sub$price, dia_sub$volume)
# Subset the data to exclude diamonds with a volume
# greater than or equal to 800. Also, exclude diamonds
# with a volume of 0. Adjust the transparency of the
# points and add a linear model to the plot. (See the
# Instructor Notes or look up the documentation of
# geom_smooth() for more details about smoothers.)
qplot(x=volume, y=price, data=dia_sub) + geom_smooth() + geom_point(alpha=1/20)
# Subset the data to exclude diamonds with a volume
# greater than or equal to 800. Also, exclude diamonds
# with a volume of 0. Adjust the transparency of the
# points and add a linear model to the plot. (See the
# Instructor Notes or look up the documentation of
# geom_smooth() for more details about smoothers.)
qplot(x=volume, y=price, data=dia_sub) +
stat_smooth(method = "lm", formula = y ~ x, size = 1) +
geom_point(alpha=1/20)
dia_cla <- subset(diamonds, diamonds$carat)
diamondsByClarity<- summarise(mean_price=mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n=n())
diamondsByClarity<- summarise(mean_price=mean(dia_cla$price),
median_price = median(dia_cla$price),
min_price = min(dia_cla$price),
max_price = max(dia_cla$price),
n=n())
dia_cla <- groupby(diamonds, clarity)
dia_cla <- groupBy(diamonds, clarity)
dia_cla <- group_by(diamonds, clarity)
diamondsByClarity<- summarise(mean_price=mean(dia_cla$price),
median_price = median(dia_cla$price),
min_price = min(dia_cla$price),
max_price = max(dia_cla$price),
n=n())
diamondsByClarity<- summarise(dia_cla,mean_price=mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n=n())
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
View(diamonds_mp_by_clarity)
library(gridExtra)
p <- barplot(x=diamonds_mp_by_clarity[0], y=diamonds_by_clarity[1])
p <- barplot(diamonds_mp_by_clarity)
p <- barplot(x=diamonds_mp_by_clarity$clarity,y=diamonds_mp_by_clarity$mean_price)
p <- barplot(diamonds_mp_by_clarity$clarity,y=diamonds_mp_by_clarity$mean_price)
p <- barplot(diamonds_mp_by_clarity_
p <- barplot(diamonds_mp_by_clarity)
p <- barplot(diamonds_mp_by_clarity)
p <- barplot(diamonds_mp_by_clarity$mean_price)
p <- barplot(diamonds_mp_by_clarity$mean_price, xlab="clarity")
p2 <- barplot(dimonds_mp_by_color$mean_price)
grid.arrange(p,p2)
p2 <- barplot(dimonds_mp_by_color$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p,p2)
grid.arrange(p,p2, ncol=2)
p <- barplot(diamonds_mp_by_clarity$mean_price, xlab="clarity")
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p,p2, ncol=2)
p <- barplot(diamonds_mp_by_clarity$mean_price, xlab="clarity")
p2 <- barplot(diamonds_mp_by_color$mean_price)
p <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p,p2, ncol=2)
grid.arrange(p,p2, ncol=2, top="hello")
grid.arrange(p,p2, ncol=2)
grid.arrange(p,p2, ncol=1)
grid.arrange(p,p2)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p,p2, ncol=2)
library(gridExtra)
grid.arrange(p,p2, ncol=2)
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity,y=mean_price))+geom_bar()
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity,y=mean_price))+geom_bar()
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p,p2, ncol=2)
grid.arrange(p1,p2, ncol=2)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p1,p2, ncol=2)
p3 <- qplot(x=clarity, y=mean_price, data=diamonds_mp_by_clarity)+geom_bar()
grid.arrange(p3,p4, ncol=2)
p4 <- qplot(x=clarity, y=mean_price, data=diamonds_mp_by_clarity)+geom_bar()
grid.arrange(p3,p4, ncol=2)
grid.arrange(p3,p4, ncol=2, top="hello")
p4 <- qplot(x=clarity, y=mean_price, data=diamonds_mp_by_clarity)+geom_bar()
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
new_groupings <- group_by(pf, age, gender)
pf$fc_by_age_gender <- summarise(new_groupings,
mean_count_count = mean(friend_count),
median_friend_count = median(friend_count),
n=n())
library(dplyr)
new_groupings <- group_by(pf, age, gender)
pf$fc_by_age_gender <- summarise(new_groupings,
mean_count_count = mean(friend_count),
median_friend_count = median(friend_count),
n=n())
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n=n()) %>%
ungroup() %>%
arrange(age)
# Chaining function
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(
mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count)),
n=n()) %>%
ungroup() %>%
arrange(age)
# Chaining function
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(
mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count)),
n=n()) %>%
ungroup() %>%
arrange(age)
head(pf.fc_by_age_gender)

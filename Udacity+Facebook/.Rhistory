test <- norm2[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(observed=test,predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(observed=test[,c(12)],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
test[,c(12)]
table(observed=test[,c(12)],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
test[,c(12)]
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
test[,c('quality')]
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
test[,c(-1)]
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
test[c(-1)]
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
summary(test$quality)
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
(test$quality)
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
(test)
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
(train)
table(observed=test[,c('quality')],predicted=predictions)
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
length(norm2)
train_ind
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
length(norm2)
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
length(nrow(norm2))
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 75% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), size=nrow(norm2))
length(nrow(norm2[0]))
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
length(nrow(norm2[0]))
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
length(nrow(norm2))
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
length(smp_size)
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * 4898)
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
length(smp_size)
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * 4898)
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
smp_size
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
smp_size
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
# rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
# rf_classifier
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
(train)
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(observed=test[,c('quality')],predicted=predictions)
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(observed=test[,c('quality')],predicted=predictions)
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
length(train_ind)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(quality~., data=train, ntree=500, mtry=2, importance=TRUE)
rf_classifier
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(factor(quality)~., data=train, ntree=500, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(observed=test[,c('quality')],predicted=predictions)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
norm2$quality.bucket <- cut(norm2$quality, breaks=c(2,4,7,9))
## 80% of the sample size
# smp_size <- floor(0.8 * nrow(norm2))
#
# ## set the seed to make your partition reproducible
# set.seed(42)
#
# train_ind <- sample(seq_len(nrow(norm2)), smp_size)
# train <- norm2[train_ind, ]
# test <- norm2[-train_ind, ]
# rf_classifier= randomForest(factor(quality)~., data=train, ntree=500, importance=TRUE)
# rf_classifier
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
norm2$quality.bucket <- cut(norm2$quality, breaks=c(2,4,7,9))
norm2 <- norm2[-c('quality')]
norm2 <- norm2[-c(14)]
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
norm2$quality.bucket <- cut(norm2$quality, breaks=c(2,4,7,9))
norm2 <- norm2[-c(14)]
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(factor(quality.bucket)~., data=train, ntree=500, importance=TRUE)
rf_classifier
varImpPlot(rf_classifier)
predictions <- predict(rf_classifier,test)
table(test[,c(14)],predicted=predictions)
library(ROCR)
install.packages('ROCR')
install.packages('ROCR')
library(ROCR)
predictions <- predict(rf_classifier,test[,c(14)],type="prob")
pretty_colours <- c("#F8766D","#00BA38","#619CFF")
classes <- test$quality.bucket
# For each class
ncol(classes)
for (i in 1:ncol(classes))
predictions <- predict(rf_classifier,test[,c(14)],type="prob")
classes <- ncol(test$quality.bucket)
# For each class
ncol(classes)
classes <- nrow(test$quality.bucket)
classes <- length(test$quality.bucket)
classes <- levels(test$quality.bucket)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
norm2$quality.bucket <- cut(norm2$quality, breaks=c(2,4,7,9))
levels(norm2$quality.bucket) <- c("Low Quality", "Medium Quality", "High Quality")
norm2 <- norm2[-c(14)]
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(factor(quality.bucket)~., data=train, ntree=500, importance=TRUE)
rf_classifier
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
norm2$quality.bucket <- cut(norm2$quality, breaks=c(2,4,7,9))
levels(norm2$quality.bucket) <- c("Low Qual.", "Med. Qual.", "High Qual.")
norm2 <- norm2[-c(14)]
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier= randomForest(factor(quality.bucket)~., data=train, ntree=500, importance=TRUE)
rf_classifier
predictions <- predict(rf_classifier,test)
table(test[,c(14)],predicted=predictions)
predictions <- predict(rf_classifier,test,type="prob")
pretty_colours <- c("#F8766D","#00BA38","#619CFF")
classes <- levels(test$quality.bucket)
#install.packages('ROCR')
library(ROCR)
predictions <- predict(rf_classifier,test,type="prob")
pretty_colours <- c("#F8766D","#00BA38","#619CFF")
classes <- levels(test$quality.bucket)
# For each class
for (i in 1:3)
{
true_values <- ifelse(test[,c(14)]==classes[i],1,0)
pred <- prediction(predictions[,i],true_values)
perf <- performance(pred, "tpr", "fpr")
if (i==1)
{
plot(perf,main="ROC Curve",col=pretty_colours[i])
}
else
{
plot(perf,main="ROC Curve",col=pretty_colours[i],add=TRUE)
}
auc.perf <- performance(pred, measure = "auc")
print(auc.perf@y.values)
}
#install.packages('randomForest')
library(randomForest)
#install.packages('caret')
library(caret)
na.omit(wine_subset)
wine_subset_subset <- wine[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15)]
preproc2 <- preProcess(wine_subset_subset[,c(1:11,13:14)],method=c("range"))
norm2 <- predict(preproc2, wine_subset_subset[,c(1:11,13:14)])
norm2$quality <- wine_subset_subset$quality
## 80% of the sample size
smp_size <- floor(0.8 * nrow(norm2))
## set the seed to make your partition reproducible
set.seed(42)
train_ind <- sample(seq_len(nrow(norm2)), smp_size)
train <- norm2[train_ind, ]
test <- norm2[-train_ind, ]
rf_classifier1= randomForest(factor(quality)~., data=train, ntree=500, importance=TRUE)
rf_classifier1
#BOX PLOTS
# ALCOHOL
ggplot(data=wine,
aes(y=alcohol)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
# DENSITY
ggplot(data=subset(wine,density<quantile(density,0.99)),
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
wine.wineByQuality <- wine %>%
group_by(quality) %>%
summarise(med_alcohol=median(as.numeric(alcohol)),
med_desity=median(as.numeric(density)),
med_chloride=median(as.numeric(chlorides)),
n=n()) %>%
ungroup() %>%
arrange(quality)
wine.wineByQuality
model <- lm(quality ~ density + alcohol + chlorides, data = wine)
summary(model)
#Let's bucket the qualities
# High [8,9] Med [5,6,7] Low [3,4]
wine$quality.bucket <- cut(wine$quality, breaks=c(2,4,7,9))
levels(wine$quality.bucket)
levels(wine$quality.bucket) <- c("Low Quality", "Medium Quality", "High Quality")
ggplot(data=subset(wine,density < quantile(density,0.99)),
aes(x=(alcohol), y=density, color=residual.sugar)) +
scale_y_log10(limits=c(0.987, 1.001)) +
facet_wrap(~quality.bucket) +
geom_point(alpha = 0.8, shape=3,size = 1) +
scale_color_gradient(low="blue", high="pink")
wine$quality.bucket <- cut(wine$quality, breaks=c(2,4,7,9))
levels(wine$quality.bucket)
levels(wine$quality.bucket) <- c("Low Quality", "Medium Quality", "High Quality")
#BOX PLOTS
# ALCOHOL
ggplot(data=wine,
aes(y=alcohol)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
# DENSITY
ggplot(data=subset(wine,density<quantile(density,0.99)),
aes(y=density)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
#CHLORIDES
ggplot(data=subset(wine, chlorides < quantile(chlorides, 0.95) &
chlorides > quantile(chlorides, 0.01)),
aes(y=chlorides)) +
geom_boxplot() +
facet_wrap((~quality.bucket)) +
scale_y_log10()
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
#install.packages('GGally')
library(ggplot2)
library(dplyr)
library(tidyverse)
library(GGally)
library(reshape2)
wine <- read.csv('wineQualityWhites.csv')
#Free sulfur dioxide rate
wine$free_rate <- wine$free.sulfur.dioxide/wine$total.sulfur.dioxide
#Fixed * Volatile * Citric acid
wine$total_acid <- wine$fixed.acidity*wine$volatile.acidity*wine$citric.acid
ggplot(data=wine, aes(x=quality, y=free.rate)) + geom_boxplot()
#We can make a variable called free rate
wine$free.rate <- wine$free.sulfur.dioxide/wine$total.sulfur.dioxide
ggplot(data=wine, aes(x=quality, y=free.rate)) + geom_boxplot()
ggpairs(wine_subset[sample.int(nrow(wine_subset), 1000), ])

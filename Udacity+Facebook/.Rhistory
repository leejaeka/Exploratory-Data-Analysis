x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
se[i]<-sum[2]
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
model[["coefficients"]][["(Intercept)"]]
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum
}
se
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[2,2]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
se <-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
sum<- summary(model)
sum[[2]]
}
se
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
# Q1
set.seed(1003661272)
n=10
n.sim=100
b0<-c()
b1<-c()
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
#Q2
hist(b0)
hist(b1)
#Q3
mean(b0)
mean(b1)
##mean(b0) = 0.5244535
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[4]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
se<-coef(model)[3]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
coef(model)
coef(model)[2,2]
coef(model)[,2]
##mean(b1) = 2.031602 Hence compared to actual B0=0.5 and B1=2,
## it is very similiar, and therefore valid.
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
#Q4
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
out
se<-out$coefficients[2 , 2]
se
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
ratio<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
print(out)
se<-out$coefficients[2 , 2]
print(se)
error<-coef(model)[2]-2
ratio[i] <- error/se
}
hist(ratio)
tSqr<-c()
for(i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
out<-summary(model)
se<-out$coefficients[2 , 2]
error<-coef(model)[2]
tSqr[i] <- (error/se)**2
}
hist(tSqr)
##25
n=25
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
##100
n=100
n.sim=100
for (i in 1:n.sim){
e<-rnorm(n, 0 ,2)
x<-rnorm(n, 0, 1)
y<-0.5 + 2*x + e
model<- lm(y~x)
b0[i]<-coef(model)[1]
b1[i]<-coef(model)[2]
}
hist(b0)
hist(b1)
mean(b0)
mean(b1)
library(ggplot2) #must load the ggplot package first
data(diamonds)
dt <- data(diamonds)
dt.head()
dt.head
head(dt)
dt <- data(diamonds)
summary(diamonds)
View(diamonds)
diamonds.color(1)
diamonds['color']
qplot(x = dt['price'], data= dt)
dt <- data(diamonds)
qplot(x = dt['price'], data= dt)
qplot(x = dt['price'], data= dt)
qplot(x = price, data= dt)
qplot(x = price, data= dt)
summary(diamonds)
qplot(x = price, data= dt)
qplot(x = price, data= pf)
pf <- data(diamonds)
qplot(x = price, data= pf)
names(pf)
qplot(x = price, data = pf)
library(ggplot2) #must load the ggplot package first
qplot(x = price, data = pf)
summary(diamonds)
count(x.price<500)
sum(x.price<500)
length(x.price<500)
length(pf.price<500)
length(pf['price']<500)
length(pf['price'])
table(pf$price)
type(pf)
class(pf)
class(pf['diamonds'])
class(pf['color'])
setwd('D:/Project/R Scripts/Exploratory-Data-Analysis/Udacity+Facebook')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
dt <- data(diamonds)
class(pf)
class(dt)
class(dt[0])
class(dt[1])
clasee(data(diamonds))
class(data(diamonds))
class(dt$price)
summary(diamonds)
summary(select(diamonds, price))
library("tidyverse")
import tidyverse
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
summary(select(diamonds, price))
ggplot(data=diamonds)
library(ggplot2) #must load the ggplot package first
qpplot(data=diamonds)
qplot(data=diamonds)
qplot(x = price, data=diamonds)
# Count, By
table(pf$price)
# Count, By
table(diamonds$price)
by(pf$price < 500)
# Count, By
table(diamonds$price < 500)
# Count, By
table(diamonds$price < 250)
# Count, By
table(diamonds$price >15000)
# Count, By
table(diamonds$price >=15000)
# Count, By
table(diamonds$price < 250)
# Count, By
table(diamonds$price < 500)
table(diamonds$price < 500)
# Count, By
table(diamonds$price < 500)
table(diamonds$price < 250)
table(diamonds$price >= 15000)
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, x-lim=(0,5000))
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=(0,5000))
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=c(0,5000))
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=c(0,2000))
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=c(250,2000))
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=c(250,2000), binwidth=10)
#quiz 5 # Explore the largest peak in the
# price histogram you created earlier.
qplot(x=price, data=diamonds, xlim=c(250,2000), binwidth=50)
# Break out the histogram of diamond prices by cut.
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(breaks = seq(0,54000,54000/5))
# Break out the histogram of diamond prices by cut.
qplot(x = price, data = pf) + scale_x_continuous(breaks=1:31) +
facet_wrap(~cuts, ncol=3)
# Break out the histogram of diamond prices by cut.
qplot(x = price, data = diamonds) + scale_x_continuous(breaks=1:31) +
facet_wrap(~cuts, ncol=3)
# Break out the histogram of diamond prices by cut.
qplot(x = price, data = diamonds) + scale_x_continuous(breaks=1:31) +
facet_wrap(~cut, ncol=3)
by(diamons$cut, summary)
by(diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary)
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds)+facet_wrap(~cut)
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds)+facet_wrap(~cut)+
scale_x_continuous(break=1:500)
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds)+facet_wrap(~cut)
+ scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds)+facet_wrap(~cut)+ scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds, binwidth=50)+facet_wrap(~cut)+
scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds, binwidth=10)+facet_wrap(~cut)+
scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds, binwidth=1)+facet_wrap(~cut)+
scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*carat, data = diamonds)+facet_wrap(~cut)+
scale_x_log10()
# Create a histogram of price per carat
# and facet it by cut.
qplot(x = price*(1/carat), data = diamonds)+facet_wrap(~cut)+
scale_x_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price, data = subset(diamonds, cut),
geom = 'boxplot') + scale_x_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price, data = diamonds),
geom = 'boxplot') + scale_x_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price, data = diamonds, geom = 'boxplot') + scale_x_log10()+
facet_wrap(~cut)
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price, data = diamonds, geom = 'boxplot') + scale_y_log10()+
facet_wrap(~cut)
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price, data = diamonds, geom = 'boxplot') + scale_y_log10()+facet_wrap(~cut)
qplot(x=price, data = diamonds,
geom = 'boxplot') + scale_y_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price,y=cut ,data = diamonds, geom = 'boxplot') + scale_y_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=price,y=cut ,data = diamonds, geom = 'boxplot') + scale_x_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=cut,y=price ,data = diamonds, geom = 'boxplot') + scale_x_log10()
# Investigate the price of diamonds using box plots,
# numerical summaries, and one of the following categorical
# variables: cut, clarity, or color.
qplot(x=cut,y=price ,data = diamonds, geom = 'boxplot') + scale_y_log10()
qplot(x=color,y=price ,data = diamonds, geom = 'boxplot') +
scale_y_log10()
by(diamonds$price, diamonds$color, summary)
IQR(diamonds$price)
IQR(diamonds$price, diamonds$color)
IQR(diamonds$color)
IQR(subset(diamonds, price)$color)
IQR(subset(diamonds, price< 1000)$color)
IQR(subset(diamonds, price< 10000)$color)
IQR(subset(diamonds, price< 10000)$price)
IQR(subset(diamonds, price< 10000000)$price)
IQR(subset(diamonds, price< 0.75)$price)
IQR(subset(diamonds, color==J)$price)
IQR(subset(diamonds, color=='J')$price)
IQR(subset(diamonds, color=='I')$price)
IQR(subset(diamonds, color=='H')$price)
IQR(subset(diamonds, color=='D')$price)
IQR(subset(diamonds, color=='E')$price)
IQR(subset(diamonds, color=='F')$price)
IQR(subset(diamonds, color=='G')$price)
IQR(subset(diamonds, color=='H')$price)
IQR(subset(diamonds, color=='I')$price)
IQR(subset(diamonds, color=='D')$price)
qplot(x=clarity,y=price ,data = diamonds, geom = 'boxplot') +
scale_y_log10()
by(diamonds$price/diamonds$carat,diamonds$color, summary)
IQR(subset(diamonds, price/carrat)$price)
IQR(subset(diamonds, price/carat)$price)
IQR(subset(diamonds, price/carat>0)$price)
qplot(x=color,y = price/carat,data = diamonds,
geom = "boxplot")
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly' ) +
scale_x_continuous()+scale_x_log10()
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly', binwidth=10 ) +
scale_x_continuous()+scale_x_log10()
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly', binwidth=2 ) +
scale_x_continuous()+scale_x_log10()
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly', binwidth=1 ) +
scale_x_continuous()+scale_x_log10()
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly', binwidth=0.1 ) +
scale_x_continuous()+scale_x_log10()
#frequency polygon
qplot(x = carat,
data = diamonds,geom='freqpoly', binwidth=0.01 ) +
scale_x_continuous()+scale_x_log10()
